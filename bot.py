import os
import asyncio
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
LANGUAGE, MAIN_MENU = range(2)

# –ê–¥–º–∏–Ω—ã
ADMINS = [6504169287]
user_data = {}

# –¢–µ–∫—Å—Ç—ã –ø–æ —è–∑—ã–∫–∞–º
LANGUAGE_TEXTS = {
    "uz": "‚úÖ Til tanlandi. Iltimos, /start buyrug'ini bosing.",
    "ru": "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
    "en": "‚úÖ Language selected. Please press /start to begin."
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz"),
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
        ]
    ]
    await update.message.reply_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose a language:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return LANGUAGE

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id] = {"lang": lang_code}
    await query.edit_message_text(LANGUAGE_TEXTS[lang_code])
    return MAIN_MENU

# /admin
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMINS:
        await update.message.reply_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n/stat - –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/deleteall - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# /stat
async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMINS:
        count = len(user_data)
        await update.message.reply_text(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

# /deleteall
async def delete_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMINS:
        user_data.clear()
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "ok"

# –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return "Bot ishlayapti!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={LANGUAGE: [CallbackQueryHandler(set_language)]},
    fallbacks=[],
    per_user=True
)

application.add_handler(conv_handler)
application.add_handler(CommandHandler("admin", admin_panel))
application.add_handler(CommandHandler("stat", stat))
application.add_handler(CommandHandler("deleteall", delete_all))

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    async def run():
        webhook_url = f"https://olympiad-bot.onrender.com/{TOKEN}"
        await application.bot.set_webhook(webhook_url)
        print(f"‚úÖ Webhook set: {webhook_url}")

    asyncio.run(run())

    # Flask –Ω–µ –¥–∞—ë—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
