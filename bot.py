import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters, ContextTypes
)
from openpyxl import Workbook, load_workbook

# –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LANGUAGE, MAIN_MENU = range(2)
ADMINS = [6504169287]  # Telegram ID –∞–¥–º–∏–Ω–æ–≤

# === –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LANGUAGE_TEXTS = {
    "uz": "–ò–ª—Ç–∏–º–æ—Å, –±–æ—Å–ª–∞—à —É—á—É–Ω /start –±—É—é—Ä–∏“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥",
    "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
    "en": "Please press /start to begin",
}

user_data = {}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("üá∑üá∫ Uzbek", callback_data="lang_uz"),
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
        ]
    ]
    await update.message.reply_text(
        "–¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return LANGUAGE

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–∞ ===
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id] = {"lang": lang_code}
    await query.edit_message_text(LANGUAGE_TEXTS[lang_code])
    return MAIN_MENU

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMINS:
        await update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: \n/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in ADMINS:
        count = len(user_data)
        await update.message.reply_text(f"–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

# === –§–ª–∞—Å–∫-—Å–µ—Ä–≤–µ—Ä ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "ok"

@app.route("/")
def index():
    return "Bot ishlayapti!"

# === –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è ===
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        LANGUAGE: [CallbackQueryHandler(set_language)],
    },
    fallbacks=[],
    per_user=True
)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
application.add_handler(conv_handler)
application.add_handler(CommandHandler("admin", admin_panel))
application.add_handler(CommandHandler("stat", stat))

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
